<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Long Journey</title>
    <link>http://alebaffa.github.io/blog/</link>
    <description>Recent content on The Long Journey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <copyright>(c) 2015 Alessandro Baffa.</copyright>
    <lastBuildDate>Mon, 16 May 2016 21:04:53 +0200</lastBuildDate>
    <atom:link href="http://alebaffa.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>First try with concurrency in Go</title>
      <link>http://alebaffa.github.io/blog/2016/05/16/first-try-with-concurrency-in-go/</link>
      <pubDate>Mon, 16 May 2016 21:04:53 +0200</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2016/05/16/first-try-with-concurrency-in-go/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while I&amp;rsquo;m practicing with Go, but I had still never tried its concurrency features so far. My bad.&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href=&#34;http://exercism.io&#34;&gt;exercism.io&lt;/a&gt; has just introduced me to this topic with the exercise &lt;a href=&#34;http://exercism.io/exercises/go/parallel-letter-frequency/readme&#34;&gt;&amp;ldquo;Parallel Letter Frequency&amp;rdquo; exercise&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The core of my solution is here (I let you read the comments).&lt;/p&gt;

&lt;p&gt;Basically the exercise asks you to count the frequency of the letters in 3 different strings. They provide you with already a function that counts the frequency, but you are asked to call that function with 3 calls in parallel (one call for each string) and to collect the result (the total frequencies from all the 3 strings).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Frequency(s string) map[rune]int {
  //DO SOMETHING
}
func ConcurrentFrequency(words []string) map[rune]int {
  // (buffered)channel if type map[run]int with capacity of the lenght of the input (3)
	channel := make(chan map[rune]int, len(words))

	for _, value := range words {
		// anonymous function that calls Frequency() 3 times in parallel
		// and puts the three different results in the channel of capacity 3
		go func(v string){
			channel &amp;lt;- Frequency(v)
		}(value)
	}

  // Now use the values inside the channel.
  frequency := map[rune]int
	// loops 3 times because channel of size 3
	for range words {
		for key, value := range &amp;lt;-channel {
			frequency[key] += value
		}
	}
  return frequency
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this solution I am basically looping over the array of strings in input and call the Frequency() function on every iteration. The interesting thing is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go func(v string){
  channel &amp;lt;- Frequency(v)
}(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I&amp;rsquo;m starting a &lt;strong&gt;goroutine&lt;/strong&gt; on an &lt;strong&gt;anonymous function&lt;/strong&gt; (the &lt;em&gt;go&lt;/em&gt; prefix before &lt;em&gt;func&lt;/em&gt;) inside of which I call Frequency(). The Frequency function sends its returned value in a &lt;strong&gt;channel&lt;/strong&gt; (of the same type returned from the function). The channel is the way goroutines communicates with each other and so it&amp;rsquo;s also the way to send values back.&lt;/p&gt;

&lt;p&gt;Once the channel contains the returned values, you can loop over the channel itself (not sure here if it&amp;rsquo;s because it&amp;rsquo;s a &lt;em&gt;buffered channel&lt;/em&gt; and so with a specified capacity or I can do this every time, I still have to understand this).
The channel is of type &lt;em&gt;map[rune]int&lt;/em&gt; and so I can fetch &lt;key, value&gt; from it, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for range words {
  for key, value := range &amp;lt;-channel {
    frequency[key] += value
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Working with channels is very simple and powerful. There are plenty of things that I still have to learn, but this was a good start. &lt;strong&gt;Thanks Exercism.io&lt;/strong&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Paradox Of Choice In Learning to Code</title>
      <link>http://alebaffa.github.io/blog/2016/05/16/the-paradox-of-choice-in-learning-to-code/</link>
      <pubDate>Mon, 16 May 2016 15:37:25 +0200</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2016/05/16/the-paradox-of-choice-in-learning-to-code/</guid>
      <description>

&lt;p&gt;I was talking with a guy some days ago and it went like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;he told me &amp;ldquo;&lt;em&gt;I really would like to start improving myself and I need a pet project..&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;I said &amp;ldquo;&lt;em&gt;great idea! But where do you want to improve?&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;li&gt;he said &amp;ldquo;&lt;em&gt;..that&amp;rsquo;s the problem: I still don&amp;rsquo;t know what I want to use. There are so many things out there that I would like to learn &amp;hellip; and I don&amp;rsquo;t know where to start&amp;hellip;&lt;/em&gt;&amp;ldquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This made me think about a book I read some time ago called &amp;ldquo;&lt;a href=&#34;http://www.amazon.com/Paradox-Choice-Why-More-Less/dp/149151423X&#34;&gt;The Paradox of Choice: Why More Is Less&lt;/a&gt;&amp;rdquo; (the author gave also an awesome &lt;a href=&#34;https://www.ted.com/talks/barry_schwartz_on_the_paradox_of_choice?language=en&#34;&gt;TED Talk&lt;/a&gt; about it). Basically the book talks about the relationship between the huge amount of choices we have nowadays with our happiness and freedom. People tend to think that having more choices (e.g.: more jeans in the shop to choose from, more books in the library, more courses on a learning platform, etc..) means that we have more &lt;em&gt;freedom&lt;/em&gt;, you are free to choose the thing that is more appropriate for you. The more the things we can choose from, the more free we are.&lt;br /&gt;
The author debunks this myth showing that the fact to have so many different choices doesn&amp;rsquo;t lead people to &lt;em&gt;feel more free&lt;/em&gt;, but instead it leads them to a &lt;em&gt;paralysis&lt;/em&gt; (in their mental choice process) and to a constant feeling of regret: you buy a book and you soon regret to not have bought the other one in your wish list (&amp;rdquo;&lt;em&gt;perhaps it was better&lt;/em&gt;&amp;rdquo;).&lt;br /&gt;
Constant dissatisfaction instead of happiness.&lt;/p&gt;

&lt;p&gt;The same thing is happening nowadays with technology and, more specifically, with programming. There are so many choices out there to choose from that people, like the guy I was talking to, don&amp;rsquo;t know &lt;em&gt;where to start&lt;/em&gt;. Javascript? Well, good luck. AngularJS? Oh wait, which one? &lt;em&gt;Angular 2 is coming&lt;/em&gt;. Java 8? Wait wait, Java 9 is scheduled for next year. Machine Learning? No no, the next &lt;em&gt;big-thing-I-am-sure&lt;/em&gt; will be Server-less architecture. Go, Haskell, Scala, Kotlin, Rust &amp;hellip; and if you want to pick just one platform to learn you can choose among Coursera, HackerRank, TopCoder, EggHead, CodeAcademy, CodeSchool, Udemy, Udacity &amp;hellip;.&lt;br /&gt;
&lt;strong&gt;UNLIMITED-OPTIONS-AVAILABLE&lt;/strong&gt;! The consequence is that people don&amp;rsquo;t know where to start if they try to follow this entropy. &lt;br /&gt;
The bad news is that Software Engineering is a field that changes so rapidly that all these things listed above will change in a couple of years. Again. So, it&amp;rsquo;s time to stop your mental chaos. How?&lt;/p&gt;

&lt;h2 id=&#34;stop-choosing:71dc9aeb37beba07c4d0736dfed6da34&#34;&gt;Stop choosing&lt;/h2&gt;

&lt;p&gt;The book provides a simple solution to this paralysis: stop choosing. Do not spend mental energy regretting your choice because &lt;em&gt;maybe&lt;/em&gt; the other one could have been better. If the difference is not so relevant (in terms of price, time, etc..) stop feeling bad and start to fully enjoy what you already have. There will be always something absolutely better out there, but what you have is already good enough.&lt;br /&gt;
What does it mean for developers?&lt;/p&gt;

&lt;h2 id=&#34;ask-yourself-the-right-question:71dc9aeb37beba07c4d0736dfed6da34&#34;&gt;Ask yourself the right question&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s only one way to face the increasing entropy: a solid knowledge of the basics of Software Engineering. Stop choosing the next programming language or technology to learn. The question you should ask yourself should not be &amp;ldquo;&lt;em&gt;should I choose between X and Y?&lt;/em&gt;&amp;rdquo;, but instead it should be &amp;ldquo;&lt;em&gt;What I want to become? A professional developer or a simple coder?&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ask yourself how well do you know things like design patterns, software design, cohesion, coupling, data structures, algorithms&amp;hellip;are you able to have a discussion about these things with other technical people? Do you think to have enough knowledge to decide the good strategies to write clean and testable code?&lt;br /&gt;
If your answer is &lt;em&gt;no&lt;/em&gt; or you&amp;rsquo;re not sure, well you&amp;rsquo;ve narrowed your options. Do a step back, that&amp;rsquo;s where you have to improve. &lt;br /&gt;
Welcome to the 2nd stage of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Four_stages_of_competence&#34;&gt;Four Stages of Competence&lt;/a&gt;: &lt;em&gt;conscious incompetence&lt;/em&gt; (you&amp;rsquo;re not alone, I&amp;rsquo;m there with you!).&lt;/p&gt;

&lt;p&gt;Technologies change every time. Having strong knowledge foundations is what makes the difference between a professional developer and a simple coder.&lt;/p&gt;

&lt;p&gt;Choose one of them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bowling kata in Go</title>
      <link>http://alebaffa.github.io/blog/2016/05/16/bowling-kata-in-go/</link>
      <pubDate>Mon, 16 May 2016 12:10:33 +0200</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2016/05/16/bowling-kata-in-go/</guid>
      <description>&lt;p&gt;This is my solution for the Bowling Kata, written in Go.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/c3a6b863f905f1cc073d6611d3baafe2.js&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Be careful with slice</title>
      <link>http://alebaffa.github.io/blog/2016/03/31/be-careful-with-slice/</link>
      <pubDate>Thu, 31 Mar 2016 06:56:10 +0200</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2016/03/31/be-careful-with-slice/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/slices&#34;&gt;Slices&lt;/a&gt; are a great tool in Go, but sometimes they can be confused with arrays.
A small reminder: slices are a pointer into an underline array. Let&amp;rsquo;s take this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;array := []int{1, 2, 3, 4, 5, 6}
slice := array[1:3]

// let&#39;s print both
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

// array:  [1 2 3 4 5 6]
// slice: [2 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the slice is only a pointer to the underline array, if you do some operations with the elements of the array you are also changing the elements of the slice. Like this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// let&#39;s double the first element of the array
array[1] *= 2

// let&#39;s print the array and the slice
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

// array:  [1 4 3 4 5 6]
// slice: [4 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A slice have two important properties:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(&amp;quot;length of the slice: &amp;quot;, len(slice))
fmt.Println(&amp;quot;capacity of the slice: &amp;quot;, cap(slice))

// length of the slice: :  2
// capacity of the slice: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The length is the number of elements that the slice contains, while the capacity is the max number of elements it can contain.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to take care of what happens when the slice fulfills its capacity. Let&amp;rsquo;s continue the example by adding new things in the slice (and so in the array):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;middle = append(slice, 100)
middle = append(slice, 101)
middle = append(slice, 102)
middle = append(slice, 103)

// slice:  [4 3 99 100 101 102 103]
// array:  [1 4 3 99 100 101]
// capacity of slice:  10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array has reached its length (6 elements), but the slice has been extended. It is actually been copied and moved and it became a new slice with double capacity (10. It was 5 before).&lt;/p&gt;

&lt;p&gt;At this point the slice is not pointing anymore to that array. So, now if you do some operations to the underline array, the elements of the slice won&amp;rsquo;t change anymore. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// let&#39;s double the first element of the array
array[1] *= 2

// let&#39;s print the array and the slice now:
fmt.Println(&amp;quot;array: &amp;quot;, array)
fmt.Println(&amp;quot;slice: &amp;quot;, slice)

//array:  [1 8 3 99 100 101]
//slice:  [4 3 99 100 101 102 103]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the &lt;em&gt;array[1] = 8&lt;/em&gt;, but the corresponding element in the slice is still 4.&lt;/p&gt;

&lt;p&gt;This is an important thing to take care of when you&amp;rsquo;re using slices. It can be really confusing. Always take care of the capacity in case your program is managing a lot of elements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Surrounding yourself with the right people</title>
      <link>http://alebaffa.github.io/blog/2016/02/23/surrounding-yourself-with-the-right-people/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2016/02/23/surrounding-yourself-with-the-right-people/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/cerini.jpeg&#34; alt=&#34;alt text&#34; title=&#34;passion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was 8 years old when I started playing guitar. It was not my choice, though, but my parents’ who forced me to start taking some lessons. I hated it at the beginning: hours of solfège, and I wasn’t even able to play the most stupid song. No chords, nothing at all.&lt;/p&gt;

&lt;p&gt;Nevertheless I had some natural talent for music (I’m gifted with the so called musical ear. And so my brother and sister are - the Force is strong in my family), and maybe my parents knew that and that’s why they persisted so much with me.&lt;/p&gt;

&lt;p&gt;Time passed and I learned chords and arpeggios. I actually became so good until the point where my teacher told me that I was his most successful student ever, and he didn’t have anything more to teach me. He suggested me to go to the conservatory, but it was too much of an engagement both for me and for my parents and so I quite taking lessons.
I remember I felt relieved. No more lessons, no more waste of my precious time (1 hour / week &amp;hellip;). I could spend that hour playing football with my friends. So I quit playing guitar in general.
I was 11.&lt;/p&gt;

&lt;p&gt;I didn’t touch my guitar for about 7 years, until a summer when I made a new friend. He was (he still is) an extraordinary guitarist, and he was able to reproduce all the songs he knew just listening to them for few minutes. He was always the coolest guy of the party. And he was/is also an extremely nice and funny guy. I loved the way he played his guitar, and his passion was so contagious that he made me willing to take mine and start playing again. During those few weeks my passion came back with all its strength. I started to learn new chords, find new ones and I soon realized that I was not so bad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My passion was driving me to a new level of consciousness&lt;/strong&gt; and I found some things to be easier than I thought years before. &lt;strong&gt;My friend’s passion has triggered mine&lt;/strong&gt;. I’ve been playing guitar no-stop for years since then, and I improved so much. I own two guitars now.&lt;/p&gt;

&lt;p&gt;I also love photography. I started to take photos when I first came here in south of France from Italy. The scenery was beautiful and so I thought to buy my first DSLR (a Nikon D70s). When I started using it I was very bad, I wasn’t even able to take a good photo in normal conditions and all those gears were difficult to manage. After some months with no improvements I gave up. I didn’t use my Nikon for about a year until I registered to an &lt;a href=&#34;http://kelbyone.com/&#34;&gt;online course&lt;/a&gt; where I discovered the post-processing. I was hooked. I discovered a new entire world of possibilities and so I started to improve my photos in order to apply all those cools things I was looking on the web. Then I tried &lt;a href=&#34;http://strobist.blogspot.fr/2011/01/introducing-strobist-lighting-in-layers.html&#34;&gt;another one&lt;/a&gt;, and in one year I hugely improved my skills and now &lt;a href=&#34;https://www.flickr.com/photos/alebaffa/&#34;&gt;I’m not so bad&lt;/a&gt;. Again, something that has brought my passion back to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Surrounding yourself with passion and optimism is one of the best things you can do to improve yourself and your environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s the reason why I started to go to conferences: once back home you’re so full of enthusiasm that you restart whatever you do with a new energy.
It’s the reason why I started to co-organize a &lt;a href=&#34;http://www.meetup.com/French-Riviera-Software-Craftsmanship-Community/&#34;&gt;local Meetup&lt;/a&gt;.
It’s also the reason why I like being a developer advocate, because I meet and work with so many passionate people who trigger my passion and pro-activity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being surrounded by passionate people can speed up your learning process by giving you that amount of motivation that you sometime may lose on your way.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Things to consider before open sourcing your project written in go</title>
      <link>http://alebaffa.github.io/blog/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2015/11/26/things-to-consider-before-open-sourcing-your-project-written-in-go/</guid>
      <description>

&lt;p&gt;so, you want to finally release your &lt;em&gt;preciousss&lt;/em&gt; written in Go to the open source community. Great! And thank you.
Though, there are few things you may want to consider before doing the big step. Things that you may have missed perhaps because you are not yet 100% comfortable with Go (but “_I will improve later. Now let me just put this gem on Github._”).
You have to know that the Go community can be quite strict when it comes to its idioms and conventions. And they are right, in my opinion. So, in order to avoid hundred of issues and pull requests on Github focused mainly on code style and best practices, and not on the real core of your project, check these following few things before pushing your code.&lt;/p&gt;

&lt;h2 id=&#34;be-sure-you-read-effective-go:4d0de480b34d2f2804a1a5f468baab59&#34;&gt;Be sure you read Effective Go&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html&#34;&gt;Effective Go&lt;/a&gt; contains all the tips you need to know in order to write clear and idiomatic Go code. You will learn all the best practices and the conventions used and followed by the Go community.
Effective Go is essential not only for newbies programmers, but also (and foremost) for those coming from other programming languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A straightforward translation of a C++ or Java program into Go is unlikely to produce a satisfactory result — Java programs are written in Java, not Go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;avoid-common-mistakes:4d0de480b34d2f2804a1a5f468baab59&#34;&gt;Avoid common mistakes&lt;/h2&gt;

&lt;p&gt;The Go community over the years has identified some common mistakes made in Go projects, and so common comments in the code reviews. These comments are now collected in the &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go Code Review Comments&lt;/a&gt; page.
Be sure not to make these common mistakes yourself, so give a read to that page.&lt;/p&gt;

&lt;h2 id=&#34;use-all-the-tools:4d0de480b34d2f2804a1a5f468baab59&#34;&gt;Use all the tools&lt;/h2&gt;

&lt;p&gt;Go comes with some amazing tools that allow you to write idiomatic Go with less effort. Be sure to check all your code with, at least, these few ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt;: to automatically formats Go source code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;golint&lt;/a&gt;: to print out code style mistakes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/vet/&#34;&gt;govet&lt;/a&gt;: to examine the code and report suspicious constructs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only by using at least these 3 tools you can manage to write clear and idiomatic Go code and avoid a lot of issues and pull requests. And they also help you to learn Go in the proper way :) .
&lt;strong&gt;Good news&lt;/strong&gt;. The Go community is so good that there are plugins for the most used IDE: &lt;a href=&#34;https://github.com/DisposaBoy/GoSublime&#34;&gt;GoSublime&lt;/a&gt; and the &lt;a href=&#34;https://forum.golangbridge.org/t/beta-testers-wanted-sublimetext-go/1282&#34;&gt;official Google plugin&lt;/a&gt; (in test) for SublimeText, &lt;a href=&#34;https://atom.io/packages/go-plus&#34;&gt;GoPlus&lt;/a&gt; for Atom, &lt;a href=&#34;https://github.com/fatih/vim-go&#34;&gt;vim-go&lt;/a&gt; for Vim and, incredibly enough, VisualStudio has a lot of good reviews for Go.
There are a lot of other IDE, but these ones, apparently, are the most used ones by the community.&lt;/p&gt;

&lt;h2 id=&#34;stay-up-to-date-with-the-go-development:4d0de480b34d2f2804a1a5f468baab59&#34;&gt;Stay up-to-date with the Go development&lt;/h2&gt;

&lt;p&gt;If you are open sourcing a Go project chances are that you may be impacted by changes in the Go libraries, or whatever can happen with the development of Go in general. It’s better to stay up-to-date with what happens and follow the discussions on these Google Groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/golang-dev&#34;&gt;golang-dev&lt;/a&gt;: discussions of the development of the Go project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/golang-nuts&#34;&gt;golang-nuts&lt;/a&gt;: general discussion list for the Go Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;be-part-of-the-community:4d0de480b34d2f2804a1a5f468baab59&#34;&gt;Be part of the community&lt;/h2&gt;

&lt;p&gt;The Go community is super active. Just go &lt;a href=&#34;https://github.com/golang/go/wiki#the-go-community&#34;&gt;here&lt;/a&gt; to choose how you want to follow it. It’s important to follow the discussions if you’re seriously working with Go, you may discover useful things, or you could get to know important developments or projects that can impact your work.
And don’t forget the &lt;a href=&#34;https://golang.org/conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Good! Now that you know what to check .. just to do it and let us know when your preciousss will be available for us to enjoy! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Back from dotgo 2015</title>
      <link>http://alebaffa.github.io/blog/2015/11/10/back-from-dotgo-2015/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://alebaffa.github.io/blog/2015/11/10/back-from-dotgo-2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../../../img/dotgo.jpeg&#34; alt=&#34;alt text&#34; title=&#34;dotgo2015&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Today I’ve been at the dotGo conference in Paris, the European conference about the Go programming language. Quick summary: &lt;strong&gt;fantastic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s the second time I participate (I’ve been there also last year, 2014) and I found exactly the same impeccable organization, a beautiful location (with lots of food..), a great ambiance, and the talks, as usual, have been extremely interesting, inspiring and cool. Some of them (not in the same order of the conference):&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://alebaffa.github.io/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://alebaffa.github.io/blog/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../img/speaker.jpg&#34; alt=&#34;alebaffa&#34; style=&#34;width: 300px; float: left; margin-right: 20px&#34;/&gt; Hi, my name is &lt;strong&gt;Alessandro Baffa&lt;/strong&gt;, I am an Italian Software Engineer and Developer Advocate at &lt;a href=&#34;http://www.amadeus.com&#34;&gt;Amadeus IT Group&lt;/a&gt;. More info on &lt;a href=&#34;https://www.linkedin.com/in/alessandrobaffa&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am very interested in software engineering, with a particular focus on OOP, testing and web programming.&lt;/p&gt;

&lt;p&gt;I am a strong advocate of clean code and good practices, and I am firmly convinced that a good professional should never stop learning.&lt;/p&gt;

&lt;p&gt;This blog contains what I am finding on my personal journey towards software craftsmanship.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>